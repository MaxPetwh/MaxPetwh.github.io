#ifndef _TEST_H_     //在做大项目时，为了避免重新包含头文件而加的判断
#define _TEST_H_


#endif

static静态效果，如果你想让别人调用接口而不得到调用文件内部的数据，则对数据前面加一个static 
static void test(){
  数据
}
void test_printf(){
  int time = 0;    //你加static，每次进入函数都重新执行time = 0，数只加一次
  static int time = 0;     //加了static的话就只执行一次，数会累加
  time ++;
  test();
}
调用的时候将数据直接调用test_printf()这个函数既可以


define与typedef区别

typedef char * zhizhen1;
#define zhizhen2 char *

zhizhen1 c1,c2;     /*c1,c2 都为char*,typedef为char*引入一个新的别名 */
zhizhen2 c3,c4;     /*char *c3,c4;c3为指针类型,  而c4为char类型*/


#define NET_INIT 1
#define NET_CONNECT_ING 2
#define NET_CONNECT_SUCCESS 3
#define NET_CONNECT_FAIL 4

typedef enum{
  NET_INIT 1,
  NET_CONNECT_ING,
  NET_CONNECT_SUCCESS,
  NET_CONNECT_FAIL,
  NET_ERROR,
}E_NET_STATUS;
enum的作用是枚举，在使用这个枚举命名后，使用E_NET_STATUS时只能使用这个枚举内部的提供的数据，输入其他非枚举内的数据都不会响应
enum是C语言中的一个关键字，enum叫枚举数据类型，枚举数据类型描述的是一组整型值的集合（这句话其实不太妥当）,
枚举型是预处理指令#define的替代，枚举和宏其实非常类似，宏在预处理阶段将名字替换成对应的值，枚举在编译阶段将名字替换成对应的值，


struct结构体
typedef struct{
  int system_status;
  E_NET_STATUS net_status;
  int motor_status[4];
  int pay_status;
}T_D

//初始化一个结构体变量
T_D g_D;
T_D g_D1;

void main(){
  g_D.net_status = NET_INIT;
  g_D_1.net_status = NET_CONNECT_ING;
  printf ("Net status = %d\n",g_D.net_status);
  printf ("Net1 status = %d\n",g_D_1.net_status);
}



//va_list()的使用
//va_list的说明：是在C语言中定义的宏,解决问题
//变参问题是指参数的个数不定，可以是传入一个参数也可以是多个;
//可变参数中的每个参数的类型可以不同,也可以相同;
//可变参数的每个参数并没有实际的名称与之相对应。

//用法：#include <stdarg.h>
//void test_1(char *fmt,...){
  va_list arg1;  //首先定义函数va_list的变量
  va_start(arg1,fmt);  //然后用va_start宏初始化变量刚定义的va_list变量；
  printf(" %d \n",va_arg(arg1,int));  //va_arg返回可变的参数，va_arg的第二个参数是你要返回的参数的类型
  printf(" %d \n",va_arg(arg1,int));
  printf(" %d \n",va_arg(arg1,int));  //第三个值因为没有定义所以返回指针所指地址
  va_end(arg1);//最后用va_end宏结束可变参数的获取
}

void main(){
    int a = 10,b = 11;
    printf("app start1\n");
    //printf("%d \n",a);
    test_1("",a,b);
    //返回的结果为：app start1
                   10
                   11
                   4201152
}
    
    
    
    
    
 void EM_LOG(const char *fmt,...){
    va_list arg;
    va_start(arg,fmt);
    char buf[1+vsnprintf(NULL,0,fmt,arg)];  //！！这里加
    vsnprintf(buf,sizeof(buf),fmt,arg);
    va_end(arg);
    printf("%s\n",buf);
}

void main(){
    int a = 10,b = 11;
    EM_LOG("app start");
}    //输出的结果为：app star  没有t,因为不止把常变参数传进去外还附加入了结束符所以会多占一位输出的结果少一个,在char buf 里vsnprintf 加1才能显示完整的输出结果
    


//printf,fprintf,vsnprintf的区别  printf是将输出结果打印出来,fprintf是将日志信息打印到文件里去,vsnprintf是日志打印到命名的函数里去
vsnprintf函数
头文件：#include  <stdarg.h>
函数原型：int vsnprintf(char *str, size_t size, const char *format, va_list ap);
函数说明：将可变参数格式化输出到一个字符数组
参数：
str输出到的数组，size指定大小，防止越界，format格式化参数，ap可变参数列表函数用法
#include <stdio.h>
#include <stdarg.h>
 
void SYSTEM(const char * format, ...)
{
	char buff[4069];
	va_list list;
	va_start(list, format);
	vsnprintf(buff, 4069, format, list);
	va_end(list);
	printf("%s\n", buff);
}
 
void main()
{
	SYSTEM("%d_%s", 6, "abc");
}



//固件响应的代码
#define LOG_LEVEL LOG_WARN   //！！LOG_LEVEL 后填LOG_DEBUG的话，就是打印所以，如果LOG_LEVEL 后填WARN 只会打印LOG_WARN和LOG_ERROR，上面的两个不会打印出来
typedef enum{
    LOG_DEBUG = 0,
    LOG_INFO,
    LOG_WARN,
    LOG_ERROR,
}E_LOGLEVEL;

char * EM_LOGLevelGet(const int level){   //日志等级显示
    if(level == LOG_DEBUG){
        return "DEBUG";
    }else if(level == LOG_INFO){
        return "INFO";
    }else if(level == LOG_WARN)
    {
        return "WARN";
    }else if(level == LOG_ERROR)
    {
        return "ERROR";
    }
    return "UNKNOW";  
}



void EM_LOG(const int level,char *fmt,...){   //固件的宏设计
    #ifdef OPEN_LOG 
    va_list arg;
    va_start(arg,fmt);
    char buf[1+vsnprintf(NULL,0,fmt,arg)];
    vsnprintf(buf,sizeof(buf),fmt,arg);
    va_end(arg);
    if (level >=LOG_LEVEL )
        printf("[%s] %s\n",EM_LOGLevelGet(level),buf);  //前面的[%s]为日志等级，后一个%s为打印具体的内容
    #endif
}

void main(){
    EM_LOG(LOG_DEBUG,"app start");
    EM_LOG(LOG_INFO,"app INFO");
    EM_LOG(LOG_WARN,"app LOG_WARN");
    EM_LOG(LOG_ERROR,"app LOG_ERROR");
}





////测试代码编写！！！！！
#include <stdio.h>
#include <stddef.h>
#include <setjmp.h>
#include <stdlib.h>

typedef struct
{
    int output;                  //输出参数
    int a;                       //输入参数1
    int b;                       //输入参数2
    int (*TestEMFunc)(int,int);  //函数指针将上面的参数传入到测试代码当中去
}T_EMTest;

T_EMTest *addFunc(int (*TestEMFunc)(int,int),int a,int b,int output)   //添加函数
{
    T_EMTest *m_EMTest = (T_EMTest *)malloc(sizeof(T_EMTest));    //动态申请内存变量   malloc函数是动态内存分配
    m_EMTest->a = a;//->在C语言中称为间接引用运算符，是二目运算符，优先级同成员运算符“.”  有个等价写法：(*p).a，和p->a完全等效
    m_EMTest->b = b;
    m_EMTest->output = output;
    m_EMTest->TestEMFunc = TestEMFunc;
    return m_EMTest;
}

void runEMTest(T_EMTest *p_EMTest)
{
    if(p_EMTest != NULL){
        int count = p_EMTest->TestEMFunc(p_EMTest->a,p_EMTest->b);
        if (count == p_EMTest->output)
            printf("success\n");
        else{
            printf("fail %d != %d",count);
        }            
        free(p_EMTest);  //释放所占内存
    }
}


int add(int a,int b){
    //TODO
    return a + b;
}

void main()
{
    printf("app start\n");
    T_EMTest *m_EMTest = addFunc(add,1,2,3);  //将返回的参数存储下来
    runEMTest(m_EMTest); //运行
}









